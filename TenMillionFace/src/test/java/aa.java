import com.google.gson.JsonObject;
import connectpool.GeneratePool;
import connectpool.MilvusClientPool;
import io.milvus.client.*;
import org.junit.Test;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;

/**
 * @Author: huangJunJie  2021-04-14 14:38
 */
public class aa {

    @Test
    public void testQuery() throws Exception {
        String collectionName = "FACE_1599613749049";
        int topk = 100;
        List<List<Float>> lists = generateVectors(1, 512);
        long startTime = System.currentTimeMillis();
        List<QueryResDTO> query = query(collectionName, lists.get(0), topk);
        System.out.println("调用query方法总耗时" + (System.currentTimeMillis() - startTime));


    }


    public List<QueryResDTO> query(String appId, List<Float> feature, Integer topK) throws Exception {

        String HOST = "192.168.136.222";
        int PORT = 19540;

        ConnectParam connectParam = new ConnectParam.Builder().withHost(HOST).withPort(PORT).build();

        long a = System.currentTimeMillis();

        MilvusClient client = new MilvusGrpcClient(connectParam);

        System.out.println(String.format("创建连接耗时%dms", System.currentTimeMillis() - a));

        List<List<Float>> features = new ArrayList<>();
        features.add(feature);

        JsonObject searchParamsJson = new JsonObject();
        searchParamsJson.addProperty("nprobe", 1024);

        SearchParam searchParam = new SearchParam.Builder(appId)
                .withFloatVectors(features)
                .withTopK(topK)
                .withParamsInJson(searchParamsJson.toString())
                .build();


        SearchResponse searchResponse = client.search(searchParam);

        List<Long> ids = searchResponse.getResultIdsList().get(0);
        List<Float> distances = searchResponse.getResultDistancesList().get(0);

        List<Float> transDistances = new LinkedList<>();
        for (Float distance : distances) {
            transDistances.add(CosineDistanceTool.convertEur2CosUp(distance));
        }

        List<QueryResDTO> res = new LinkedList<>();
        for (int i = 0; i < ids.size(); i++) {
            QueryResDTO temp = new QueryResDTO();
            temp.setEntityId(ids.get(i));
            temp.setDistance(transDistances.get(i));
            res.add(temp);
        }


        return res;

    }

    /**
     * 生成随机向量
     */
    public static List<List<Float>> generateVectors(int vectorCount, int dimension) {
        SplittableRandom splitcollectionRandom = new SplittableRandom();
        List<List<Float>> vectors = new ArrayList<>(vectorCount);
        for (int i = 0; i < vectorCount; ++i) {
            splitcollectionRandom = splitcollectionRandom.split();
            DoubleStream doubleStream = splitcollectionRandom.doubles(dimension);
            List<Float> vector =
                    doubleStream.boxed().map(Double::floatValue).collect(Collectors.toList());
            vectors.add(vector);
        }
        return vectors;
    }

    @Test
    public void testTime() throws InterruptedException {
        time();
    }

    public void time() throws InterruptedException {
        String HOST = "192.168.136.222";
        int PORT = 19540;

        ConnectParam connectParam = new ConnectParam.Builder().withHost(HOST).withPort(PORT).build();
        for (int i = 0; i < 10; i++) {
            long a = System.currentTimeMillis();

            MilvusClient client = new MilvusGrpcClient(connectParam);

            System.out.println(String.format("创建连接耗时%dms", System.currentTimeMillis() - a));
        }
        Thread.sleep(2000);
        long a = System.currentTimeMillis();

        MilvusClient client = new MilvusGrpcClient(connectParam);

        System.out.println(String.format("创建连接耗时%dms", System.currentTimeMillis() - a));


    }

    @Test
    public void aaa() {
        String s = "1600000307177324802 0.349454 0.716898 0.412964 -0.212659 0.312989 -0.493623 0.312256 0.845339 0.0244842 -0.39801 -0.832695 -0.604224 -0.351459 0.0802519 -0.158485 0.798641 -0.68976 0.0629562 0.0969959 -0.308982 0.126111 0.319955 -0.5427 0.839745 0.0947673 0.642196 0.190369 -0.612242 0.776392 0.392929 -0.0649671 0.738838 -0.502553 -0.295966 -0.780286 0.0955647 -0.723724 0.404333 0.316588 0.356649 0.410369 0.334397 0.0957669 0.496754 -0.702751 0.0631742 -0.571393 -0.573162 -0.183418 0.492625 0.188505 0.224417 -0.437435 0.080351 0.811825 0.56769 -0.288809 -0.160983 -0.401665 1.25767 -0.273526 0.142611 0.0635277 0.140237 -0.11995 0.342966 0.370247 0.332042 -0.510976 0.639564 -0.460036 0.414496 -0.06972 -0.285515 0.441236 -1.07104 -0.842133 0.244532 0.0792036 0.468757 -0.542539 0.336717 0.135846 -0.644846 -0.692434 -0.349759 0.294841 -0.529083 -0.170123 0.106204 -0.303698 0.334211 0.389792 -0.384093 -0.286073 -0.266642 -0.461815 -0.00102603 0.246939 -0.171348 0.293973 -1.18701 0.285357 0.23583 0.565775 0.0364323 0.323573 0.634618 0.878957 0.0465618 0.261682 -0.357979 0.480169 -0.0387882 0.861524 0.501524 0.0902475 -0.188916 -0.695008 0.374734 -0.0547322 -0.258059 0.353985 0.458972 0.138336 0.277631 -0.854028 -0.549229 0.928835 -0.241184 -0.566077 -0.23996 0.133458 -0.567603 0.0769927 0.415516 0.355246 0.365577 0.113771 -0.440803 0.341713 0.4017 0.424225 -0.429045 -0.284232 -0.645743 -0.309709 -0.230445 0.485731 -0.483742 0.161547 0.233342 -0.305036 0.127688 0.15895 -0.342273 1.28407 -0.129698 0.85077 -0.578712 0.0897352 0.0492883 -0.301883 0.157517 0.291841 -0.107928 -0.00894828 -0.418747 0.362522 0.350405 0.134116 -0.327766 0.0849772 -0.540452 0.190716 -0.380105 0.0455038 -0.427953 0.276033 0.167936 0.875724 0.196911 -0.364367 -0.0571645 0.887042 0.091914 0.233135 0.75201 -0.148713 0.468492 -0.497597 0.562587 -0.315714 -0.331488 -0.544377 -0.11981 -0.576079 0.538941 -0.295235 -0.346949 -0.170157 -0.469748 1.0781 -0.152897 -0.63167 -0.380992 -0.179177 -0.280046 -0.593629 -0.152611 -0.145811 -0.574377 0.0605879 0.743784 0.357334 -0.658301 0.00969788 -0.55734 -0.35448 -0.359949 0.998847 0.352296 -0.553433 0.125322 0.096164 -0.607376 -0.912131 -0.10432 -0.444 -0.115385 -0.345155 0.217889 0.231672 0.78889 0.299892 -0.591883 -0.220263 -0.15312 0.118697 0.425014 0.407956 0.451637 -0.251281 -0.403255 -0.466517 0.105934 0.7149 -0.0831762 -0.254348 -0.231321 -0.115612 0.502439 0.207441 -0.686776 -0.528275 0.290464 0.948939 -0.555985 -0.427187 -0.33808 -1.13639 -0.682817 0.127421 -0.00943929 -0.113498 0.42214 -0.365064 -0.000541231 0.0352095 -0.454438 0.713551 -0.444943 0.298199 -0.232662 -0.382329 -0.108975 -0.129289 -0.0431668 -1.01412 -0.539316 0.207175 -0.98932 -0.0564349 -0.448556 -0.248831 0.691507 -0.272427 0.44955 0.723488 0.270122 -0.16118 -0.875499 0.0638602 0.392386 -0.206949 -0.112059 0.447978 -0.120041 -0.302957 -0.417439 0.518731 -0.543306 0.168088 -0.134783 0.053155 -0.110767 -0.551851 -0.0443779 -0.297398 -0.0788649 0.0944335 -0.141589 0.11272 0.636521 0.0991299 0.074371 0.289645 0.8406 0.0754444 -0.00108814 0.185527 -0.161402 -0.633431 0.177089 0.424031 -0.12346 -0.0548307 -0.904265 0.687721 -0.208691 -0.130808 0.387344 0.73027 0.460529 0.51012 0.25052 0.617702 0.279631 0.277192 0.404192 -0.659632 -0.0144056 0.404176 -0.178883 -0.140348 -0.297306 -0.610629 -0.0805379 -0.411666 -0.70498 -0.308596 0.0774105 0.433293 0.287295 -0.212315 -0.491247 -0.337374 -0.191147 -0.8758 -0.265314 -0.195985 -0.933159 -0.632473 -0.504267 -0.190279 0.475532 0.504082 0.337295 -0.326324 0.134267 -0.0227513 -0.159634 -0.306538 -0.360391 -0.0347982 0.267685 -0.14007 0.652497 -0.0454071 -0.378162 0.412785 0.271392 -1.28753 0.53213 0.311165 -0.357566 0.934425 0.016308 -0.087265 0.49663 -0.106139 -0.862234 0.451481 0.0954121 -0.323506 -0.504664 0.214714 -0.109442 -0.0464226 0.0819347 -0.389358 0.290596 -1.15953 0.602582 0.152927 -0.266546 0.00564352 -0.257692 -0.144173 0.430383 0.062606 -0.0949224 0.274502 0.407973 -0.233159 0.0768036 -0.278155 -0.124434 0.378621 0.985317 -0.0302294 -0.0516297 0.319007 1.04668 0.886159 0.884031 0.248709 -0.201907 -0.16316 0.0896052 0.164134 -0.0209919 0.0808516 -0.155226 -0.0388246 -0.277157 -0.767981 0.509407 -0.110273 -0.520815 0.162412 0.185978 0.169081 -0.289368 0.114597 -0.10474 -0.0756932 0.626338 0.128299 0.113698 -0.580896 -0.989991 0.217264 -0.23535 0.23254 -0.535562 -1.12207 -0.76847 -0.153305 -0.0745609 -0.155167 -0.730603 0.0661568 0.105322 0.209955 -0.304611 0.258311 0.741335 0.545 -0.23488 -0.901862 -0.405644 -0.326619 0.474734 0.413541 0.469007 0.396147 -0.741374 -0.311778 -0.0903438 -0.00983473 -0.203248 0.089705 0.344202 -0.898639 -0.00133895 0.0162745 -0.357429 -0.107436 -0.324255 -1.41958 0.0266141 0.329079 0.179311 -0.553921 -0.00602332 -0.495816 0.497743 0.379331 -0.00328207 -0.204897 -0.272709 0.352434 0.0948077 0.503216 -0.0584987 0.536344 0.45435 -0.323629 -0.399113 -0.232555 0.58738";
        String[] s1 = s.split(" ");
        System.out.println(s1.length);
    }

    @Test
    public void bbb() {
        while (true) {
            ConnectParam connectParam = new ConnectParam.Builder().withHost("192.168.136.203").withPort(19531).build();
            MilvusClient client = new MilvusGrpcClient(connectParam);

            String str = "-0.034512833 0.040554088 -0.014442636 0.07581789 0.0366534 0.026736934 0.008074179 0.03333974 0.065435864 0.039789308 0.019497253 -0.07891923 -0.018684018 0.037244834 0.0031857723 -0.03321059 -0.06864951 -0.05031912 0.031932842 -0.0370503 0.06318817 0.09468735 -0.0057422398 4.6424894E-4 -0.048355617 0.02872532 -0.017515566 0.029052522 -0.09703848 0.06508458 0.07070199 0.09862047 -0.030296674 -0.059996482 -0.013066977 -0.08843126 0.047728833 9.18584E-4 -0.04603367 0.0154593745 -0.049716573 0.05290244 0.094168365 0.025170516 0.029350715 -0.023447206 0.0284554 -0.026363526 -0.0064038658 -0.038864896 0.06775086 -0.059090085 0.03835913 -0.08454616 0.050233558 -0.082886636 0.06929861 -0.055646185 0.049124297 0.0052004205 -0.010976824 -0.0055112704 -0.034792077 0.020170748 -0.10161111 -0.011853674 -0.040176462 0.022396894 0.04750343 0.029055724 2.0209991E-4 -0.016169691 -0.020137658 0.08003761 0.085333586 -0.03599596 -0.029402582 -0.008970097 -0.049036987 0.02937297 -0.031511884 0.07981553 -0.0013553941 -0.023477504 -0.0290303 0.043066483 -0.035708666 0.07407864 -0.01948565 -0.036755793 0.055905104 -0.013562168 -0.007224728 -0.020037504 0.02326027 -0.009499873 -0.03849671 -0.043641478 0.011169613 -0.002433647 0.08658396 0.0226888 0.02342172 -0.018286666 -0.0045177853 0.05401788 -0.019349717 0.034588248 -0.032746185 0.07078862 -0.05411456 -0.04035049 -0.09424769 0.028514266 -0.028418222 0.03850069 -0.071204334 0.022128936 -0.00987114 0.05978394 -0.021744097 -0.019319812 -8.8571646E-4 0.0032813577 -0.04867769 -0.06610523 0.015158055 0.022353297 0.10231371 -0.023286337 -0.1025379 -0.0040977504 -0.018821903 -0.01202694 -0.036556117 0.0342385 -0.03716508 -0.02068748 0.041177683 -0.031139323 -0.07984797 0.0025283857 -0.021478113 0.02895179 0.06624686 0.034295246 -0.021496894 -0.022142926 -0.015451499 -0.024600524 0.06798664 0.06931807 0.0041647158 0.00201212 0.031201076 0.10823339 0.025350833 -0.014327133 -0.06179085 0.002830839 -0.0077916747 0.03181655 -0.06745901 -0.024891702 -0.07325392 0.029500922 -0.009978807 -0.0049951375 -0.015148532 -0.04493378 -0.03806148 -0.0059423414 -0.023550464 -0.051949397 -0.055168524 -0.044299524 -0.01229071 0.05370409 0.025455607 0.05613931 0.061855197 -0.045046978 -0.032036714 -0.006706717 0.05355678 0.03194282 0.028869163 0.0041790158 -0.05316795 0.017841574 -0.014618571 0.026199946 0.08677564 0.0014746572 0.050559822 0.015450174 -0.048709974 -0.028121497 0.06223691 0.059090026 -0.035460837 -0.042317845 -0.07630191 0.020453721 -0.015890356 0.026785808 0.020505276 -0.009039237 0.008349169 0.041137155 0.0044262004 -0.0080588665 0.022899183 0.02444383 -0.037191227 0.015417656 0.036286414 0.04759291 -0.027860796 0.023700144 -0.029678904 -0.070052944 0.08096823 -0.050209366 0.0022477424 0.020642824 0.00539888 -0.07345916 -0.0045781354 -0.06529739 0.0036777626 -0.010780002 -0.026948186 -0.006661342 -0.029529722 0.02708603 0.028307194 -0.05900876 -0.08236962 -0.07101153 0.016999805 -0.009493099 -0.012618904 -0.1339182 -0.005848291 0.049128417 -0.012873954 0.023607086 0.030412568 -0.06769732 -0.055362307 -0.020147864 -0.086075336 -0.015649745 0.05541883 0.044616535 0.010243331 0.029334005 -0.06439139 -0.094333716 0.027135143 0.039981548 -0.028077755 0.030427184 -0.036928747 0.040345456 0.03911559 -0.032065473 0.06901988 -0.026244076 -0.10388582 0.02635579 -0.039062597 -0.004705893 0.029443303 0.093182266 -0.029960815 0.08509067 0.029815394 0.029644452 -0.009290233 -0.06170649 0.027803726 0.009402632 -0.04712154 0.013649312 0.079655446 0.0035768156 -0.0014953082 0.018693881 0.057261772 -0.026926447 0.05216556 0.033130664 0.010157418 -0.0077580553 0.026569368 -0.014435757 -0.012912762 0.01202839 -1.9507255E-5 -0.025831785 0.016746132 -0.083965115 0.0064983456 -0.004510676 -0.050292917 0.06701689 0.0014119296 0.027438313 -0.07929866 -0.01961368 0.052295808 -0.014817529 -0.023703855 -0.016390776 -0.08615612 -0.059185565 0.13824154 0.04208081 0.013213291 0.009495225 0.02648717 -0.04311112 0.0784835 0.065836035 -0.014047803 0.03917703 0.005509486 0.0416077 -0.033760373 -0.009322921 -0.065954044 -0.02230333 0.008861553 0.020856349 0.002820753 -0.0202441 -0.048895627 -0.0051043327 0.026166372 -0.042500924 -0.014056847 -0.034560908 -0.012221853 -0.012397539 -2.887274E-4 -0.027499128 0.04970705 0.06486477 -0.03879062 0.016803633 0.045085542 -0.11223494 -0.061023664 -0.008779059 0.04168793 -0.031891763 0.09049592 -0.046075523 -0.045759663 0.023156792 -0.034533948 0.008481371 -0.0036593475 0.03043928 0.0058392854 0.023170915 0.049495347 0.03670278 -0.016886873 0.04685142 -0.019239547 -0.021070559 -0.068572074 -0.0057715834 0.044497848 -0.11107676 -0.03651923 -0.024654085 0.11065333 0.013552328 0.08298522 -0.016081767 -0.008676415 0.042125303 -0.0077604908 -0.024328558 0.029696384 -0.030497905 0.011559802 0.06020303 0.0011537058 -0.02605837 -0.015024611 -0.022188913 0.029045358 0.07942831 -0.031230235 0.07107729 0.028674861 0.044283945 -0.0065186266 -0.020856591 -0.05556813 0.031848993 0.03545912 -0.016839715 -0.018737657 0.04031621 0.0077958927 0.032962635 -0.007110984 -0.008570843 0.02756527 0.03310883 0.00424849 0.035434794 -0.02938817 -0.0086087175 0.025063422 -0.021790443 0.07631723 -0.005711194 0.01901105 0.02639307 -0.039169937 0.07079046 0.028017825 0.014863249 0.035589624 0.031195944 0.040904745 -0.010727091 -0.021215426 -0.082054734 6.030393E-4 0.0073253703 -0.025972681 0.008791093 -0.06902818 0.02734926 -0.035001982 -0.05745617 0.0013748223 -0.036144618 -0.006049179 0.029690962 -0.031391602 0.054718517 -0.020661302 0.03242302 -0.046188682 -0.06527349 0.12010895 0.03369267 -0.09375524 -0.039823994 0.0446773 0.07446237 0.008790903 0.015384949 -0.010687155 -0.0035497348 -0.037867766 -0.04855849 0.051356778 -0.03366114 -0.0040481314 0.09165728 -0.014184387 -0.017474521 0.029006066 0.01327697 0.03399661 -0.05532329 0.013163638 -0.06447528 -0.018280767 0.0045151636 0.009947064 0.0012854846 -0.054311797 0.04100976 -0.016431695 0.0035063876 -0.0011320381 -0.08464452 -0.040025037 -0.027011117 -0.050425205 0.0368464 -0.0021383127 0.024418047 -0.018670494 -0.028400091 -0.0046928204 0.07462088 0.019882508 0.1280733 0.017215867 0.00480749 -0.03561485 0.04141266 -0.09301831 -0.0011266093 0.015477041 0.0099504255 -0.027766682 -0.0016717599 0.040107716 0.07356544";
            String[] s = str.split(" ");
            List<Float> vector = Arrays.stream(s).map(Float::parseFloat).collect(Collectors.toList());


            List<List<Float>> searchVector = new LinkedList<>();
            searchVector.add(normalize(vector));

            JsonObject searchParamsJson = new JsonObject();
            searchParamsJson.addProperty("nprobe", 256);
            long totaltime = 0;

            SearchParam searchParam =
                    new SearchParam.Builder("FACE_1599613749000")
                            .withFloatVectors(searchVector)
                            .withTopK(10)
                            .withParamsInJson(searchParamsJson.toString())
                            .build();

            SearchResponse search = client.search(searchParam);
            List<Long> ids = search.getResultIdsList().get(0);
//            System.out.println("ids:" + listToString(ids));
//            System.out.println("distance"+listToString(search.getResultDistancesList()));
            List<List<Float>> resultVectors = client.getEntityByID("FACE_1599613749000", ids.subList(0, 1)).getFloatVectors();
//            for (List<Float> list : resultVectors) {
//                System.out.println(listToString(list));
//            }
            if (!listToString(resultVectors.get(0)).equals(str)) {
                System.out.println("ids:" + listToString(ids));
                System.out.println("distance" + listToString(search.getResultDistancesList()));
                List<List<Float>> res = client.getEntityByID("FACE_1599613749000", ids).getFloatVectors();
                for (List<Float> list : res) {
                    System.out.println(listToString(list));
                }
                break;

            }

            client.close();

        }

    }

    private static String listToString(List list) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.size(); i++) {
            sb.append(list.get(i));
            sb.append(" ");
        }
        sb.deleteCharAt(sb.length() - 1);
        return new String(sb);
    }

    @Test
    public void ccc() {
        ConnectParam connectParam = new ConnectParam.Builder().withHost("192.168.136.203").withPort(19531).build();
        MilvusClient client = new MilvusGrpcClient(connectParam);
        List<Long> ids = new LinkedList<>();
        ids.add(1810000118160043803L);
        System.out.println(listToString(client.getEntityByID("FACE_1599613749000", ids).getFloatVectors().get(0)));
        client.close();

    }

    @Test
    public void delete() {
        ConnectParam connectParam = new ConnectParam.Builder().withHost("192.168.136.203").withPort(19531).build();
        MilvusClient client = new MilvusGrpcClient(connectParam);
        List<Long> ids = new LinkedList<>();
//        ids.add(1810000118160041003L);
//        ids.add(1810000118160038203L);
//        ids.add(1810000118160043803L);
        ids.add(1111111111111111L);

        long l1 = System.currentTimeMillis();
        client.deleteEntityByID("FACE_1599613749000", ids);
        System.out.println(String.format("删除耗时：%dms",System.currentTimeMillis()-l1));
        long l2 = System.currentTimeMillis();
        client.flush("FACE_1599613749000");
        System.out.println(String.format("刷盘耗时：%dms",System.currentTimeMillis()-l2));
        client.close();

    }

    @Test
    public void insert() {
        ConnectParam connectParam = new ConnectParam.Builder().withHost("192.168.136.203").withPort(19531).build();
        MilvusClient client = new MilvusGrpcClient(connectParam);
        List<List<Float>> vectors = new LinkedList<>();
        List<Long> ids = new LinkedList<>();
        ids.add(1111111111111111L);
        List<Float> vector = new LinkedList<>();
        for (int i = 0; i < 512; i++) {
            vector.add(0.0f);
        }
        vectors.add(vector);
        InsertParam insertParam = new InsertParam.Builder("FACE_1599613749000").withFloatVectors(vectors).withVectorIds(ids).build();
        client.insert(insertParam);
        client.flush("FACE_1599613749000");

        client.close();

    }


    /**
     * 归一化
     */
    private static List<Float> normalize(List<Float> beforeNormalize) {
        double v = 0;
        for (Float element : beforeNormalize) {
            v += Math.pow(element, 2);
        }
        double sqrtV = Math.sqrt(v);

        List<Float> afterNormalize = new LinkedList<>();
        for (Float element : beforeNormalize) {
            afterNormalize.add((float) (element / sqrtV));
        }
        return afterNormalize;
    }


}
